CREATE OR REPLACE PACKAGE PACK_HIERARCHY
AS
  

  
  TYPE TR_HIERARCHY IS TABLE OF HIERARCHY%ROWTYPE; 
  
  
  PROCEDURE SP_GET_HIERARCHY(
    P_IDENT     IN VARCHAR2,
    P_CHOICE    IN VARCHAR2,
    P_ORDER     IN VARCHAR2,
    P_HIR_CURSOR  OUT SYS_REFCURSOR,
    P_CODE  OUT NUMBER,
    P_MSG OUT VARCHAR2);
    
  PROCEDURE SP_GET_IDENT(P_RTFE IN VARCHAR2, P_IDENT OUT VARCHAR2);
  --P_MESSAGE    OUT MESSAGE.LIMSG%TYPE);
      
  PROCEDURE SP_GET_CHEF_PROJ(P_RTFE IN VARCHAR2, P_CHEF_PROJ OUT VARCHAR2);
  
END PACK_HIERARCHY;
/


CREATE OR REPLACE PACKAGE BODY PACK_HIERARCHY
AS

L_ERROR_NO_DATA EXCEPTION;

PROCEDURE SP_LOG_ERROR (P_IDENT IN VARCHAR2, P_RTFE IN VARCHAR2, P_MSG IN VARCHAR2)
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  INSERT
       INTO BATCH_LOGS_BIP VALUES
          (
            'xHierarchy1',
            TO_CHAR(sysdate,'DD/MM/YYYY'),
            TO_CHAR(sysdate,'HH24:MI:SS'),
            TO_CHAR(sysdate,'DD/MM/YYYY'),
            TO_CHAR(sysdate,'HH24:MI:SS'),
            (P_MSG ||' - '||P_IDENT||' - '||P_RTFE),
            0,
            0,
            'NOK'
          );  
      --SELECT MATRICULE INTO L_RTFE FROM RESSOURCE WHERE IDENT = P_IDENT and ROWNUM = 1; 
          
--      UPDATE TRAIT_ASYNCHRONE
--        SET STATUT   = '-1'
--       WHERE USERID = P_RTFE
--        AND STATUT   = '0'
--        AND REPORTID = 'xHierarchy1'; 
              COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
END SP_LOG_ERROR;

PROCEDURE SP_INSERT_HIERARCHY(
    P_IDENT  IN VARCHAR2,
    P_CPIDNT IN VARCHAR2,
    P_NAME      VARCHAR2,
    P_LIGNE_CNT NUMBER,
    P_ACT_IND   VARCHAR2,
    P_MAN_IND   VARCHAR2,
    P_LEVEL     NUMBER,
    P_SEL_IND   VARCHAR2)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  INSERT
  INTO HIERARCHY 
    (
      IDENT,
      CP_IDENT,
      NAME,
      LIGNE_BIP_CNT,
      ACT_IND,
      MAN_IND,
      LEVL,
      SEL_IND
    )
    VALUES
    (
      P_IDENT,
      P_CPIDNT,
      P_NAME,
      P_LIGNE_CNT,
      P_ACT_IND,
      P_MAN_IND,
      P_LEVEL,
      P_SEL_IND
    );
      --Dbms_output.put_Line('ROW_CNT : '||sql%rowcount);
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  RAISE;
END SP_INSERT_HIERARCHY;


PROCEDURE CLEAR_TMP_DATA
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  DELETE FROM HIERARCHY ;
  COMMIT;
END CLEAR_TMP_DATA;
/*
*
*
*/
PROCEDURE SP_POPULATE_UP_STREAM(P_IDENT IN VARCHAR2, P_CHOICE VARCHAR2)
IS
L_IDENT SITU_RESS.IDENT%TYPE;
L_CPIDENT SITU_RESS.IDENT%TYPE;
L_LEVEL NUMBER(9) := 0;
BEGIN
  L_IDENT := P_IDENT;
LOOP   
  FOR I IN
    (SELECT R.IDENT,
      SITU.CPIDENT,
      CASE
        WHEN R.RPRENOM IS NULL
        THEN R.RNOM
        ELSE R.RPRENOM
          ||', '
          || R.RNOM
      END NAME,
/*      CASE
        WHEN (TO_NUMBER(TO_CHAR(D.DATDEBEX, 'YYYY'))) BETWEEN TO_NUMBER(TO_CHAR(SITU.DATSITU, 'YYYY')) AND TO_NUMBER(TO_CHAR(NVL(SITU.DATDEP, SYSDATE), 'YYYY'))
        THEN 'Y'
        ELSE 'N'
      END */
      'Y' ACT_IND
    FROM RESSOURCE R,
      SITU_RESS SITU,
      DATDEBEX D
    WHERE SITU.IDENT                            = R.IDENT
    AND SITU.IDENT                              = L_IDENT
    AND (SITU.DATDEP                           IS NULL
   -- OR TO_NUMBER(TO_CHAR(SITU.DATDEP, 'YYYY')) >= TO_NUMBER(TO_CHAR(D.DATDEBEX, 'YYYY')) )
     OR (D.MOISMENS BETWEEN sITU.DATSITU AND (NVL(SITU.DATDEP, TRUNC(SYSDATE)))) 
    ))
    LOOP
      L_CPIDENT := I.CPIDENT;
      L_LEVEL := L_LEVEL+1;
      --DBMS_OUTPUT.PUT_LINE('ITERATION : '||L_LEVEL);
      
      /*DBMS_OUTPUT.PUT_LINE(I.IDENT||'-'||I.CPIDENT||'-'||I.NAME||'-'||'0'||'-'||I.ACT_IND||'-'||'Y'
      ||'-'||L_LEVEL||'-'|| (CASE WHEN L_LEVEL = 1 THEN 1 ELSE 0 END));*/
      --FIXME MAN_IND AND ACT_IND WILL BE 'Y' EVERYTIME FOR UPSTREAM
      SP_INSERT_HIERARCHY(I.IDENT,I.CPIDENT,I.NAME,'0',I.ACT_IND,'Y',L_LEVEL, (CASE WHEN L_LEVEL = 1 THEN 1 ELSE 0 END));  
    END LOOP;
    EXIT WHEN   L_IDENT = L_CPIDENT;
    L_IDENT := L_CPIDENT;
     
     IF P_CHOICE = 1
      THEN
      EXIT;
      END IF;
  
  END LOOP;  
EXCEPTION
WHEN OTHERS THEN
RAISE;
END SP_POPULATE_UP_STREAM;
/*
*
*
*/
PROCEDURE SP_UPD_LEVEL (P_MAX_LEVEL OUT NUMBER)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  L_MAX_LEVL HIERARCHY.LEVL%TYPE;
BEGIN
  SELECT MAX(LEVL)+1 INTO L_MAX_LEVL FROM HIERARCHY ;
  UPDATE HIERARCHY  SET LEVL = (L_MAX_LEVL-LEVL);
  COMMIT;
  SELECT MAX(LEVL) INTO P_MAX_LEVEL FROM HIERARCHY ;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  RAISE;
END SP_UPD_LEVEL;
/*
*
*
*/

/*
*
*
*/
PROCEDURE SP_GET_DOWN_STREAM_DATA(
    P_IDENT IN HIERARCHY.IDENT%TYPE,
    P_HIERARCHY_TC OUT TR_HIERARCHY)
IS
L_MAN_IND HIERARCHY.MAN_IND%TYPE;
BEGIN
  
  --L_MAN_IND := F_CHECK_MANAGER(P_IDENT);
  
  L_MAN_IND := 'Y';
  
  SELECT 
  R.IDENT,
  SITU.CPIDENT,
  CASE
        WHEN R.RPRENOM IS NULL
        THEN R.RNOM
        ELSE R.RPRENOM
          ||', '
          || R.RNOM
      END NAME,
      0 AS LIGNE_BIP_CNT,
  CASE
	WHEN (TO_DATE(TO_CHAR(D.DATDEBEX, 'YYYY'), 'YYYY')) BETWEEN TO_DATE(TO_CHAR(SITU.DATSITU, 'YYYY'), 'YYYY') AND TO_DATE(TO_CHAR(NVL(SITU.DATDEP, SYSDATE), 'YYYY'), 'YYYY')
	THEN
		'Y'
	ELSE
		'N'
	END ACT_IND,
  L_MAN_IND,
  0 LEVL,
  0 AS SEL_IND
  BULK COLLECT INTO P_HIERARCHY_TC
FROM RESSOURCE R,
  (SELECT IDENT,
    DATSITU,
    DATDEP,
    CODSG,
    PRESTATION,
    CPIDENT
  FROM SITU_RESS S
  WHERE INSTR(LPAD(TO_CHAR(P_IDENT), 5, '0'), TO_CHAR(S.CPIDENT, 'FM00000')) > 0
  AND (S.IDENT,S.CPIDENT, NVL(S.DATDEP, SYSDATE)) IN
    (SELECT S1.IDENT,
      S1.CPIDENT,
      MAX(NVL(S1.DATDEP, SYSDATE))
    FROM SITU_RESS S1
    WHERE INSTR(LPAD(TO_CHAR(P_IDENT), 5, '0'), TO_CHAR(S1.CPIDENT, 'FM00000')) > 0
    GROUP BY S1.IDENT,
      S1.CPIDENT
    )
  ) SITU, DATDEBEX D
WHERE SITU.IDENT                                                         = R.IDENT
AND INSTR(LPAD(TO_CHAR(P_IDENT), 5, '0'), TO_CHAR(SITU.CPIDENT, 'FM00000')) > 0
AND (SITU.DATDEP                                                        IS NULL
OR TO_NUMBER(TO_CHAR(SITU.DATDEP, 'YYYY'))                              >=
  (TO_NUMBER(TO_CHAR(D.DATDEBEX, 'YYYY')) - 2 ));
--ORDER BY SITU.CPIDENT;
  
  END SP_GET_DOWN_STREAM_DATA;
/*
*
*
*/
PROCEDURE SP_POPULATE_LIGNE_CNT
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN

FOR I IN
( SELECT DISTINCT H.IDENT,
  M.CNT
FROM HIERARCHY H,
  (SELECT CPIDENT AS IDENT ,
    COUNT(PID) CNT
  FROM
    ( SELECT DISTINCT SITU.CPIDENT CPIDENT,
      '' PID
    FROM SITU_RESS SITU,
      RESSOURCE R,
      RESSOURCE R_CP,
      DATDEBEX D
      --WHERE INSTR(:P_CHEF_PROJET, TO_CHAR(situ.cpident,'FM00000')) > 0
    WHERE (SITU.DATSITU <= D.MOISMENS)
    AND (SITU.DATDEP    IS NULL
    OR SITU.DATDEP      >= D.DATDEBEX)
    AND SITU.IDENT       = R.IDENT
    AND SITU.CPIDENT     = R_CP.IDENT
    UNION
    SELECT DISTINCT BIP.PCPI CPIDENT,
      BIP.PID PID
    FROM LIGNE_BIP BIP,
      RESSOURCE R_CP
      --WHERE INSTR(:P_CHEF_PROJET, TO_CHAR(bip.pcpi,'FM00000')) > 0
    WHERE BIP.ADATESTATUT IS NULL
    AND BIP.PCPI           = R_CP.IDENT
    )
  GROUP BY CPIDENT
  ) M
WHERE H.IDENT = M.IDENT
)
LOOP
UPDATE HIERARCHY SET LIGNE_BIP_CNT = I.CNT WHERE IDENT = I.IDENT;
END LOOP;

    DELETE
FROM HIERARCHY
WHERE rowid NOT IN
  (SELECT MIN(rowid)
  FROM HIERARCHY
  GROUP BY IDENT,CP_IDENT,NAME,LIGNE_BIP_CNT,ACT_IND,MAN_IND,LEVL,SEL_IND);
  
  DELETE FROM HIERARCHY WHERE LEVL = 1 AND ACT_IND = 'N';

COMMIT;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
RAISE;
END SP_POPULATE_LIGNE_CNT;
/*
*
*
*/
--pROCEDURE TO UPDATE MAN_IND FOR LAST LEVEL RESOURCES
PROCEDURE SP_POPULATE_MAN_IND
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN

--VIEW_LIST_ACTIVE_PM - this viw will have all active managers in current functional year
  UPDATE HIERARCHY
SET MAN_IND      = 'N'
WHERE IDENT NOT IN
  (SELECT H.IDENT
  FROM VIEW_LIST_ACTIVE_PM V,
    HIERARCHY H
  WHERE V.IDENT = H.IDENT
  );
  
  COMMIT;

EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
RAISE;
END SP_POPULATE_MAN_IND;

/*
*
*
*/
PROCEDURE SP_POPULATE_DOWN_STREAM(
    P_LEVEL IN HIERARCHY.LEVL%TYPE)
IS
  L_HIERARCHY_PARENT_TC TR_HIERARCHY := TR_HIERARCHY();
  L_LEVEL HIERARCHY.LEVL%TYPE;
  L_IDX INTEGER := 0;
  L_MAX_LEVL HIERARCHY.LEVL%TYPE;
  L_MAX_PARENT_CNT INTEGER := 0;
  L_HIERARCHY BOOLEAN := TRUE;
  L_STEP_UP_CNT HIERARCHY.LEVL%TYPE := 1;
  L_TMP INTEGER := 0;
  L_ACT_FLAG INTEGER := 0;
BEGIN

  L_LEVEL := P_LEVEL;
  
WHILE (L_HIERARCHY)
LOOP
  FOR I IN (SELECT IDENT,LEVL,ACT_IND FROM HIERARCHY  WHERE LEVL = L_LEVEL)
  LOOP
    
      -- CONSIDER ONLY ACTIVE RESOURCES
  IF I.ACT_IND = 'Y' THEN
    SP_GET_DOWN_STREAM_DATA(I.IDENT,L_HIERARCHY_PARENT_TC);
    
   IF L_HIERARCHY_PARENT_TC.COUNT > 1 THEN  
    FOR J IN L_HIERARCHY_PARENT_TC.FIRST .. L_HIERARCHY_PARENT_TC.LAST
    LOOP
    
      BEGIN
        SELECT DISTINCT 1
        INTO L_TMP
        FROM HIERARCHY 
        WHERE IDENT  = L_HIERARCHY_PARENT_TC(J).IDENT
        AND CP_IDENT = L_HIERARCHY_PARENT_TC(J).CP_IDENT;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SP_INSERT_HIERARCHY(L_HIERARCHY_PARENT_TC(J).IDENT, 
        L_HIERARCHY_PARENT_TC(J).CP_IDENT, 
        L_HIERARCHY_PARENT_TC(J).NAME, 
        L_HIERARCHY_PARENT_TC(J).LIGNE_BIP_CNT, 
        L_HIERARCHY_PARENT_TC(J).ACT_IND, 
        L_HIERARCHY_PARENT_TC(J).MAN_IND,
        --L_HIERARCHY_PARENT_TC(J).LEVL,
        I.LEVL+L_STEP_UP_CNT, L_HIERARCHY_PARENT_TC(J).SEL_IND);
      END ; 
      END LOOP;  
     END IF; 
    L_HIERARCHY_PARENT_TC.DELETE;
   END IF; 
  END LOOP;
      L_LEVEL := L_LEVEL+L_STEP_UP_CNT;  
      SELECT  MAX(LEVL) INTO L_MAX_LEVL FROM HIERARCHY ;

      IF L_LEVEL <> L_MAX_LEVL THEN
        L_HIERARCHY := FALSE;
      END IF;
END LOOP;  
EXCEPTION
WHEN OTHERS THEN
  RAISE;

END SP_POPULATE_DOWN_STREAM;
/*
*
*
*/

PROCEDURE CHECK_ACTIVE_RESOURCE(P_IDENT     IN VARCHAR2)
IS
L_TMP INTEGER := 0;
L_RTFE RESSOURCE.MATRICULE%TYPE;
BEGIN
SELECT DISTINCT 1 INTO L_TMP
    FROM RESSOURCE R,
      SITU_RESS SITU,
      DATDEBEX D
    WHERE SITU.IDENT                            = R.IDENT
    AND SITU.IDENT                              = P_IDENT
    AND (SITU.DATDEP                           IS NULL
   -- OR TO_NUMBER(TO_CHAR(SITU.DATDEP, 'YYYY')) >= TO_NUMBER(TO_CHAR(D.DATDEBEX, 'YYYY')) )
     OR (D.MOISMENS BETWEEN sITU.DATSITU AND (NVL(SITU.DATDEP, TRUNC(SYSDATE)))) 
    );
EXCEPTION
WHEN OTHERS THEN
    SP_LOG_ERROR (P_IDENT, '', 'Resource is not Active : ');  
    raise;
END CHECK_ACTIVE_RESOURCE;

PROCEDURE SP_UPD_CHOICE1_DATA(P_IDENT IN VARCHAR2 )
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN

   UPDATE HIERARCHY  SET LEVL = 1, SEL_IND = 1 WHERE IDENT = P_IDENT;
   UPDATE HIERARCHY  SET LEVL = 2 WHERE IDENT <> P_IDENT;

COMMIT;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
RAISE;
END SP_UPD_CHOICE1_DATA;

PROCEDURE SP_GET_HIERARCHY(
    P_IDENT     IN VARCHAR2,
    P_CHOICE    IN VARCHAR2,
    P_ORDER     IN VARCHAR2,
    P_HIR_CURSOR  OUT SYS_REFCURSOR,
    P_CODE  OUT NUMBER,
    P_MSG OUT VARCHAR2)
IS
L_MAX_LEVEL HIERARCHY.LEVL%TYPE;
L_HIERARCHY_TC TR_HIERARCHY := TR_HIERARCHY();
BEGIN
--flush temp data
 CLEAR_TMP_DATA;
 CHECK_ACTIVE_RESOURCE(P_IDENT);
   SP_POPULATE_UP_STREAM(P_IDENT,P_CHOICE);
 IF P_CHOICE = '2'
 THEN
  SP_UPD_LEVEL(L_MAX_LEVEL);
  SP_POPULATE_DOWN_STREAM(L_MAX_LEVEL);
 ELSIF P_CHOICE = '1'
 THEN
  SP_GET_DOWN_STREAM_DATA(P_IDENT,L_HIERARCHY_TC);
  IF L_HIERARCHY_TC.COUNT > 1
  THEN
    FOR I IN L_HIERARCHY_TC.FIRST .. L_HIERARCHY_TC.LAST
    LOOP
      SP_INSERT_HIERARCHY(L_HIERARCHY_TC(I).IDENT,L_HIERARCHY_TC(I).CP_IDENT,L_HIERARCHY_TC(I).NAME,'0',L_HIERARCHY_TC(I).ACT_IND,'Y',L_HIERARCHY_TC(I).LEVL,L_HIERARCHY_TC(I).SEL_IND);
    END LOOP; 
  END IF;
  SP_UPD_CHOICE1_DATA(P_IDENT);
 END IF;

  SP_POPULATE_MAN_IND;
  SP_POPULATE_LIGNE_CNT;
  
 /* dbms_output.put_Line('IDENT;CP_IDENT;NAME;LIGNE_BIP_CNT;ACT_IND;MAN_IND;LEVL;SEL_IND');
 for i in (select * from HIERARCHY order by levl)
  loop
  dbms_output.put_Line(i.IDENT||';'||i.CP_IDENT||';'||i.NAME||';'||i.LIGNE_BIP_CNT||';'||i.ACT_IND||';'||i.MAN_IND||';'||i.LEVL||';'||i.SEL_IND);
  end loop;*/
P_CODE := 0;
P_MSG := 'SUCCESS';

IF P_ORDER = '1'
THEN
 open P_HIR_CURSOR for select * from HIERARCHY order by LEVL,to_number(IDENT);
ELSE
   open P_HIR_CURSOR for select * from HIERARCHY h order by h.LEVL,h.NAME;
END IF;

EXCEPTION
WHEN OTHERS THEN
P_CODE := SQLCODE;
P_MSG := SQLERRM;
open P_HIR_CURSOR FOR SELECT NULL FROM DUAL;
END SP_GET_HIERARCHY;
/**
*
*
*
**/

PROCEDURE SP_GET_CHEF_PROJ(
    P_RTFE IN VARCHAR2,
    P_CHEF_PROJ OUT VARCHAR2)
IS
L_CHEF_PROJ RTFE.CHEF_PROJET%TYPE;
L_IDENT RTFE.IDENT%TYPE;
BEGIN

  SP_GET_IDENT(P_RTFE,L_IDENT);

  SELECT NVL(LISTAGG(CHEF_PROJET,';') WITHIN GROUP(
  ORDER BY CHEF_PROJET), ' ') INTO L_CHEF_PROJ
  FROM RTFE
  WHERE IDENT = L_IDENT;

  IF (L_CHEF_PROJ = ' ') THEN
  RAISE L_ERROR_NO_DATA;
  END IF;
  P_CHEF_PROJ := L_CHEF_PROJ;
EXCEPTION
WHEN L_ERROR_NO_DATA THEN
  SP_LOG_ERROR (L_IDENT, P_RTFE, 'No proper CHEF_PROJ found for : ');
  COMMIT;
  RAISE;
 WHEN OTHERS THEN 
 RAISE;
END SP_GET_CHEF_PROJ;
/**
*
*
*
**/
/*Procedure to get IDENT for X-ID or IGG
* If P_IDENT is null - we have to raise necessary Error Message popup
*/
PROCEDURE SP_GET_IDENT(P_RTFE IN VARCHAR2, P_IDENT OUT VARCHAR2)
--,  P_MESSAGE    OUT MESSAGE.LIMSG%TYPE)
IS 
L_RTFE VARCHAR2(10);
L_MSG MESSAGE.LIMSG%TYPE;
L_TMP INTEGER;
BEGIN

  IF LENGTH(P_RTFE) = 10
  THEN
    BEGIN
       SELECT IDENT INTO L_RTFE FROM RESSOURCE WHERE IGG = P_RTFE and ROWNUM = 1;    
    EXCEPTION
    WHEN OTHERS THEN
      BEGIN
    SELECT IDENT INTO L_RTFE FROM RTFE WHERE UPPER(USER_RTFE) = UPPER(P_RTFE) and ROWNUM = 1;
   EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE L_ERROR_NO_DATA;
    END;
      --The indicated person is non-existent: please correct 
    END;
   ELSIF LENGTH(P_RTFE) <= 5 THEN
    L_RTFE := LPAD(P_RTFE,5,0);
    BEGIN
    SELECT DISTINCT 1 INTO L_TMP FROM RESSOURCE WHERE IDENT = L_RTFE;
   EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RAISE L_ERROR_NO_DATA;
    END;
   ELSE
    BEGIN
      SELECT IDENT INTO L_RTFE FROM RESSOURCE WHERE UPPER(MATRICULE) = UPPER(P_RTFE) and ROWNUM = 1; 
    EXCEPTION
    WHEN OTHERS THEN
     BEGIN
    SELECT IDENT INTO L_RTFE FROM RTFE WHERE UPPER(USER_RTFE) = UPPER(P_RTFE) and ROWNUM = 1;
   EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RAISE L_ERROR_NO_DATA;
    END;
    END;
  END IF;
  --The indicated person is non-existent: please correct 
    P_IDENT := L_RTFE;
EXCEPTION
WHEN L_ERROR_NO_DATA THEN
SP_LOG_ERROR (P_IDENT, P_RTFE, 'No proper ident found for : ');
    PACK_GLOBAL.RECUPERER_MESSAGE(21325,NULL, NULL, NULL, L_MSG);
		P_IDENT := L_MSG;      
    RAISE_APPLICATION_ERROR(-20999, L_MSG);
      COMMIT;
WHEN OTHERS THEN    
SP_LOG_ERROR (P_IDENT, P_RTFE, 'No proper ident found for : ');
    PACK_GLOBAL.RECUPERER_MESSAGE(21325,NULL, NULL, NULL, L_MSG);
		P_IDENT := L_MSG;      
    RAISE_APPLICATION_ERROR(-20999, L_MSG);
      COMMIT;
END SP_GET_IDENT;

/**
*
*
*
**/
END PACK_HIERARCHY;
/
