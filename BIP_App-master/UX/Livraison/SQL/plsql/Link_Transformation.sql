CREATE OR REPLACE PACKAGE PACK_LINK_TRANSFORMATION AS 

  PROCEDURE SP_EXP_RECOVERY_PROCESS ( P_ID_BATCH IN TRAIT_BATCH.ID_TRAIT_BATCH%TYPE); 

END PACK_LINK_TRANSFORMATION;
/


CREATE OR REPLACE PACKAGE BODY PACK_LINK_TRANSFORMATION
AS

PROCEDURE SP_UPDATE_ISAC_TACHE(
    P_PID IN LIGNE_BIP.PID%TYPE,
    P_CODE OUT NUMBER,
    P_MSG OUT VARCHAR2)
IS

BEGIN
  
  FOR I IN (SELECT TACHE,TACHEAXEMETIER
  FROM ISAC_TACHE
  WHERE PID = P_PID)
  --if not found what to to
  LOOP

  PACK_LIGNE_BIP.MAJ_LIGNE_BIP_LOGS (P_PID, 'transf_lien_tache.sh', 'Axe metier Tache',I.TACHEAXEMETIER , NULL, 'Suppression de la valeur du champ VIA transf_lien_tache.sh');
  
  UPDATE ISAC_TACHE SET TACHEAXEMETIER = NULL WHERE PID = P_PID AND TACHE = I.TACHE;
END LOOP;
  P_CODE := 0;
  P_MSG  := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  P_CODE := SQLCODE;
  P_MSG  := SQLERRM;
END SP_UPDATE_ISAC_TACHE;


/*procedute to insert data in TRAIT_BATCH_RETOUR */
PROCEDURE SP_INS_TRAIT_BATCH_RETOUR(
    P_ID_BATCH IN TRAIT_BATCH.ID_TRAIT_BATCH%TYPE,
    P_ERROR_MSG  IN TRAIT_BATCH_RETOUR.ERREUR%TYPE,
    P_DATA       IN TRAIT_BATCH_RETOUR.DATA%TYPE,
    P_CODE OUT NUMBER,
    P_MSG OUT VARCHAR)
IS
BEGIN

  INSERT
  INTO TRAIT_BATCH_RETOUR
    (
      ID_TRAIT_BATCH,
      DATA,
      ERREUR
    )
  VALUES
    (
      P_ID_BATCH,
      P_DATA,
      P_ERROR_MSG
    );
      UPDATE TRAIT_BATCH
        SET TOP_RETOUR = 'O'
        WHERE ID_TRAIT_BATCH = P_ID_BATCH;

  P_CODE := 0;
  P_MSG  := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  P_CODE := SQLCODE;
  P_MSG  := SQLERRM;
END SP_INS_TRAIT_BATCH_RETOUR;


/*This development consists of recovering the Catalogue line stock to
position the DMP in the correct field and delete the old field used.*/
PROCEDURE SP_EXP_RECOVERY_PROCESS(
    P_ID_BATCH IN TRAIT_BATCH.ID_TRAIT_BATCH%TYPE)
IS
  CURSOR PID_CURSOR  IS SELECT PID FROM PID;
  L_CODE NUMBER(9);
  L_MSG  VARCHAR2(1000);
  L_TMP INTEGER(9);
  L_PZONE LIGNE_BIP.PZONE%TYPE;
  
BEGIN
  /*delete the error records with the same batch id*/
  DELETE TRAIT_BATCH_RETOUR
  WHERE ID_TRAIT_BATCH = P_ID_BATCH;
  
  FOR I IN PID_CURSOR
  LOOP
    /*The below process consists of 3 main steps
    Step_1 : check the p_zone in LIGNE_BIP is Transitory or Estimate wiht the help of i.PID. If yes execute Step_1 other wise go to step 2.
    <<If PID it slef not there in LIGNE_BIP execute Step_3.>>
    Step_2 : execute this step when p_zone is not Transitory or Estimate
    */
    BEGIN
      --Step_1:
      SELECT RTRIM(LB.PZONE) INTO L_PZONE FROM LIGNE_BIP LB WHERE LB.PID = I.PID;
      IF UPPER(L_PZONE) IN ('DEVIS','TRANSITOIRE') THEN
        --UPDATE '000000' TO LINEAXISBUSINESS2
         UPDATE LIGNE_BIP LB SET LB.LINEAXISBUSINESS2 = '000000' WHERE LB.PID = I.PID;

        -- UPDATE TACHEAXEMETIER OF ISAC_TACHE
          SP_UPDATE_ISAC_TACHE(I.PID,L_CODE,L_MSG);
          IF L_CODE <> 0 THEN
          SP_INS_TRAIT_BATCH_RETOUR(P_ID_BATCH,L_CODE||'-'||L_MSG,I.PID,L_CODE,L_MSG);
          END IF;
      ELSE
        --Step_2
        BEGIN
            SELECT DISTINCT 1 INTO L_TMP FROM DMP_RESEAUXFRANCE DMP WHERE RTRIM(DMP.DMPNUM) = L_PZONE;
          
            UPDATE LIGNE_BIP LB SET LB.LINEAXISBUSINESS2 = L_PZONE WHERE LB.PID = I.PID;
             --As requested by the customer of BIP
           -- UPDATE LIGNE_BIP LB SET LB.PZONE = NULL WHERE LB.PID = I.PID;
          
            SP_UPDATE_ISAC_TACHE(I.PID,L_CODE,L_MSG);
            IF L_CODE <> 0 THEN
              SP_INS_TRAIT_BATCH_RETOUR(P_ID_BATCH,L_CODE||'-'||L_MSG,I.PID,L_CODE,L_MSG);
            END IF;        
          
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
           SP_INS_TRAIT_BATCH_RETOUR(P_ID_BATCH,'DMP code not Exists',I.PID,L_CODE,L_MSG);
        END;
      END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      --Step_3:
      SP_INS_TRAIT_BATCH_RETOUR(P_ID_BATCH,'PID Not Exists',I.PID,L_CODE,L_MSG);
    WHEN OTHERS THEN
    SP_INS_TRAIT_BATCH_RETOUR(P_ID_BATCH,SQLCODE||'-'||SQLERRM,I.PID,L_CODE,L_MSG);
    END;
  END LOOP;
  COMMIT;
  
  
  EXCEPTION
  WHEN OTHERS
  THEN
   SP_INS_TRAIT_BATCH_RETOUR(P_ID_BATCH,SQLCODE||'-'||SQLERRM,P_ID_BATCH,L_CODE,L_MSG);
   COMMIT;
END SP_EXP_RECOVERY_PROCESS;
END PACK_LINK_TRANSFORMATION;
/
